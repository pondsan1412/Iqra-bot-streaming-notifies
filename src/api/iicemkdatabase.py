import pymysql
import time
import os
from dotenv import load_dotenv
import logging
import pymysql.cursors
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
load_dotenv()

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡∏ö‡∏ô XAMPP
def connect_db():
    """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL"""
    try:
        db_name = os.getenv("DB_NAME")
        
        if not db_name:
            raise ValueError("Database name (DB_NAME) is not set in .env file!")
        
        return pymysql.connect(
            host=os.getenv("HOST_DB"),
            user=os.getenv("USER_DB"),
            password=os.getenv("PASSWORD_DB"),
            database=db_name,
            charset="utf8mb4",
            cursorclass=pymysql.cursors.DictCursor
        )
    except pymysql.MySQLError as e:
        print(f"‚ùå MySQL Error: {e}")
        raise  # Re-raise the error after logging it
    except ValueError as ve:
        print(f"‚ùå ValueError: {ve}")
        raise  # Re-raise the error after logging it
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        raise  # Re-raise the error after logging it


# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á Users ‡πÅ‡∏•‡∏∞ OTP Codes ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
def create_tables():
    db = connect_db()
    cursor = db.cursor()
    
    sql_users = """
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) UNIQUE NOT NULL,
        username VARCHAR(255) NOT NULL,
        password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """
    sql_otp = """
    CREATE TABLE IF NOT EXISTS otp_codes (
        id INT AUTO_INCREMENT PRIMARY KEY,
        email VARCHAR(255) NOT NULL,
        otp VARCHAR(6) NOT NULL,
        expires_at BIGINT NOT NULL
    );
    """
    cursor.execute(sql_users)
    cursor.execute(sql_otp)
    db.commit()
    db.close()


def create_readonly_user(email: str, username: str, password: str) -> bool:
    db = connect_db()
    cursor = db.cursor()

    try:
        username_safe = pymysql.converters.escape_string(username)
        password_safe = pymysql.converters.escape_string(password)

        db.begin()  # ‚úÖ ‡πÉ‡∏ä‡πâ Transaction

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ MySQL user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        sql_check_user = "SELECT COUNT(*) FROM mysql.user WHERE user = %s AND host = 'localhost';"
        cursor.execute(sql_check_user, (username,))
        result = cursor.fetchone()

        logging.debug(f"üîç Query Result: {result}")  # ‚úÖ Debug Log ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ

        # ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `result` ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ index `[0]`
        user_exists = bool(result and isinstance(result, tuple) and len(result) > 0 and result[0] > 0)

        # ‚úÖ ‡∏ñ‡πâ‡∏≤ user ‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        if not user_exists:
            sql_create_user = f"CREATE USER '{username_safe}'@'localhost' IDENTIFIED BY '{password_safe}';"
            cursor.execute(sql_create_user)
        else:
            sql_alter_user = f"ALTER USER '{username_safe}'@'localhost' IDENTIFIED BY '{password_safe}';"
            cursor.execute(sql_alter_user)

        # ‚úÖ ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå SELECT ‡πÅ‡∏Å‡πà user
        sql_grant_privileges = f"GRANT SELECT ON {os.getenv('DB_NAME')}.* TO '{username_safe}'@'localhost';"
        cursor.execute(sql_grant_privileges)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users **‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á MySQL User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à**
        sql_insert_user = "INSERT INTO users (email, username, password) VALUES (%s, %s, %s)"
        cursor.execute(sql_insert_user, (email, username_safe, password_safe))

        db.commit()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        logging.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User `{username_safe}` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True

    except pymysql.MySQLError as e:
        db.rollback()  # ‚ùå ‡∏ñ‡πâ‡∏≤ Error, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        logging.error(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return False

    finally:
        cursor.close()
        db.close()

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OTP ‡∏•‡∏á Database
def save_otp(email: str, otp: str):
    db = connect_db()
    cursor = db.cursor()
    expires_at = int(time.time()) + 300  # ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    sql = "INSERT INTO otp_codes (email, otp, expires_at) VALUES (%s, %s, %s)"
    cursor.execute(sql, (email, otp, expires_at))
    db.commit()
    db.close()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡πÉ‡∏ô Database
def verify_otp(email: str, user_otp: str) -> bool:
    db = connect_db()
    cursor = db.cursor()
    delete_expired_otps()

    sql = "SELECT otp FROM otp_codes WHERE email = %s AND expires_at > %s"
    cursor.execute(sql, (email, int(time.time())))
    result = cursor.fetchone()
    
    if result and result["otp"] == user_otp:
        delete_otp(email)
        db.close()
        return True
    db.close()
    return False

# ‡∏•‡∏ö OTP ‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
def delete_expired_otps():
    db = connect_db()
    cursor = db.cursor()
    sql = "DELETE FROM otp_codes WHERE expires_at <= %s"
    cursor.execute(sql, (int(time.time()),))
    db.commit()
    db.close()

# ‡∏•‡∏ö OTP ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
def delete_otp(email: str):
    db = connect_db()
    cursor = db.cursor()
    sql = "DELETE FROM otp_codes WHERE email = %s"
    cursor.execute(sql, (email,))
    db.commit()
    db.close()

def check_email_exists(email: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Database ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    db = connect_db()
    cursor = db.cursor(cursor=pymysql.cursors.DictCursor)  # ‚úÖ ‡πÉ‡∏ä‡πâ dictionary cursor

    try:
        sql = "SELECT COUNT(*) AS count FROM users WHERE email = %s"
        cursor.execute(sql, (email,))
        result = cursor.fetchone()

        logging.info(f"üîç Email check result: {result}")  # ‚úÖ Debug log

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö result ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡πà‡∏≤
        if result and "count" in result:
            return result["count"] > 0

        return False
    except pymysql.MySQLError as e:
        logging.error(f"‚ùå Database error: {e}")
        return False
    finally:
        cursor.close()
        db.close()
